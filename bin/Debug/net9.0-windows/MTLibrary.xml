<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MTLibrary</name>
    </assembly>
    <members>
        <member name="T:MTLib.General.SymbolicGrid`1">
            <summary>
            A grid of Symbols.
            </summary>
        </member>
        <member name="P:MTLib.General.SymbolicGrid`1.Count">
            <summary>
            Counts all non-null Symbols.
            </summary>
        </member>
        <member name="M:MTLib.General.SymbolicGrid`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MTLib.General.SymbolicGrid`1.Clear(`0)">
            <summary>
            Clears the Symbolic grid of all symbols.
            </summary>
        </member>
        <member name="M:MTLib.General.SymbolicGrid`1.Contains(`0)">
            <summary>
            Determines if the <paramref name="symbol"/> is in <c>this</c>.
            </summary>
            <returns><c>true</c>, if the <paramref name="symbol"/> is contained.</returns>
        </member>
        <member name="T:MTLib.Generative.SyntacticGenerator">
            <summary>
            Provides a high level interface for sequential syntax generation.
            </summary>
        </member>
        <member name="M:MTLib.Generative.SyntacticGenerator.Write(System.Byte,System.Boolean,MTLib.Generative.SyntacticGenerator.TabType)">
            <summary>
            Writes the given <c>Literal</c> to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <returns><c>this</c> instance, for consecutive calls.</returns>
        </member>
        <member name="M:MTLib.Generative.SyntacticGenerator.Write(System.String,System.Boolean,MTLib.Generative.SyntacticGenerator.TabType)">
            <summary>
            Writes the given <see cref="T:System.String"/> to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <returns><c>this</c> instance, for consecutive calls.</returns>
        </member>
        <member name="M:MTLib.Generative.SyntacticGenerator.ToString">
            <inheritdoc/>
        </member>
        <member name="T:MTLib.Secure.DictionaryFile`2">
            <summary>
            A generic class that manages a dictionary of key-value
            pairs, allowing for temporary storage and synchronization with a file, 
            while providing functionality to revert changes and track read/write operations.
            </summary>
            <typeparam name="T1">Key type</typeparam>
            <typeparam name="T2">Value type</typeparam>
        </member>
        <member name="M:MTLib.Secure.Salt.ToString">
            <inheritdoc/>
        </member>
        <member name="M:MTLib.Secure.Salt.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:MTLib.Secure.Salt.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:MTLib.Terminal.Style">
            <summary>
            Represents a <see cref="T:System.ConsoleColor"/> Style-Sheet to use whilst printing.
            </summary>
        </member>
        <member name="M:MTLib.Terminal.Style.#ctor">
            <summary>
            Instantiates a new <see cref="T:MTLib.Terminal.Style"/>, with default parameters.
            </summary>
        </member>
        <member name="M:MTLib.Terminal.Style.Push">
            <summary>
            Applies this <see cref="T:MTLib.Terminal.Style"/> to the <see cref="T:System.Console"/>.
            </summary>
            <returns>The previous <see cref="T:MTLib.Terminal.Style"/> that was being used.</returns>
        </member>
        <member name="M:MTLib.Terminal.Style.Write(System.String,MTLib.Terminal.IConsoleWriter)">
            <summary>
            Writes a <see cref="T:System.String"/> to the <see cref="T:System.Console"/>, using this
            <see cref="T:MTLib.Terminal.Style"/>.
            </summary>
            <param name="msg">The <see cref="T:System.String"/> to write.</param>
            <param name="style">The <see cref="T:MTLib.Terminal.Style"/> to use whilst writing.</param>
        </member>
        <member name="M:MTLib.Terminal.Style.op_Implicit(MTLib.Terminal.Style)~System.ValueTuple{System.ConsoleColor,System.ConsoleColor}">
            <summary>
            Implicitly casts a <see cref="T:System.ConsoleColor"/> <see cref="T:System.Tuple"/> from
            a <see cref="T:MTLib.Terminal.Style"/> instance.
            </summary>
            <param name="style">The <see cref="T:MTLib.Terminal.Style"/> to implicitly cast.</param>
        </member>
        <member name="M:MTLib.Terminal.Style.op_Explicit(System.ValueTuple{System.ConsoleColor,System.ConsoleColor})~MTLib.Terminal.Style">
            <summary>
            Explicitly casts a <see cref="T:MTLib.Terminal.Style"/> from a
            <see cref="T:System.ConsoleColor"/> <see cref="T:System.Tuple"/>.
            </summary>
            <param name="tup">The <see cref="T:System.Tuple"/> to cast.</param>
        </member>
        <member name="M:MTLib.Terminal.Style.op_Explicit(System.ConsoleColor)~MTLib.Terminal.Style">
            <summary>
            Explicitly casts a <see cref="T:MTLib.Terminal.Style"/> from a
            <see cref="T:System.ConsoleColor"/> instance.
            The background parameter is defaulted.
            </summary>
            <param name="color">The <see cref="T:System.ConsoleColor"/></param>
        </member>
        <member name="F:MTLib.Terminal.Menu.MasterStyle">
            <summary>
            This controls the color scheme of default text in Menus.
            text such as Title, Description, and Body will be colored with this.
            </summary>
        </member>
        <member name="F:MTLib.Terminal.Menu.PromptStyle">
            <summary>
            This controls the color scheme of the text that is entered by the user,
            when <see cref="M:MTLib.Terminal.Menu.Prompt"/> is called.
            </summary>
        </member>
        <member name="F:MTLib.Terminal.Menu.ClearConsole">
            <summary>
            If true, the Console will be cleared before each <see cref="M:MTLib.Terminal.Menu.Draw"/>.
            </summary>
        </member>
        <member name="F:MTLib.Terminal.Menu.Triggers">
            <summary>
            Keywords that 'Trigger' forward movement into specified <see cref="T:MTLib.Terminal.Menu"/>s
            </summary>
        </member>
        <member name="F:MTLib.Terminal.Menu.Hooks">
            <summary>
            Command-like 'Hooks' each call an <see cref="!:Action&lt;Menu, String?&gt;"/>.
            </summary>
        </member>
        <member name="F:MTLib.Terminal.Menu.LastMenu">
            <summary>
            Represents this instance's last used <see cref="T:MTLib.Terminal.Menu"/>. It is a shallow copy of it.
            </summary>
        </member>
        <member name="M:MTLib.Terminal.Menu.Prompt">
            <summary>
            Draws this <see cref="T:MTLib.Terminal.Menu"/> and then awaits for
            a line to be entered by the user, and calls the according
            <c>Triggers</c> and <c>Hooks</c>
            </summary>
            <returns><c>True</c>, if either was properly called</returns>
        </member>
        <member name="M:MTLib.Terminal.Menu.Draw">
            <summary>
            Writes the <see cref="T:MTLib.Terminal.Menu"/> to the <see cref="T:MTLib.Terminal.IConsoleWriter"/>, using a sane
            and simplistic formatting.
            </summary>
        </member>
        <member name="T:MTLib.Terminal.Menu.Macros">
            <summary>
            Provides static <see cref="T:MTLib.Terminal.Menu"/>-related fields (mostly <c>MenuHooks</c>)
            that aid development speed, and ease of use.
            </summary>
        </member>
        <member name="F:MTLib.Terminal.Menu.Macros.Exit">
            <summary>
            Calls <code>Environment.Exit(0);</code> while catching any security violations.
            </summary>
        </member>
    </members>
</doc>
